#!pip install google-generativeai langchain langchain-google-genai tavily-python
#!pip install faiss-cpu beautifulsoup4 pypdf
#!pip install langchain-community
#!pip -q install openai
#!pip install -q langtrace-python-sdk
#%pip install --upgrade --quiet langchain-text-splitters tiktoken
#!pip install google

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import PyPDFLoader
from langchain_community.vectorstores import FAISS
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain.tools import Tool
import os

#os.environ['GOOGLE_API_KEY'] = 'ABCD'

loader = PyPDFLoader("AR.pdf")
docs = loader.load_and_split()

text_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(
    model_name="gpt-4",
    chunk_size=500,
    chunk_overlap=100)

documents = text_splitter.split_documents(docs)

embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

vector = FAISS.from_documents(documents, embeddings)

retriever = vector.as_retriever()

# create tool for retrieving documents
from langchain.tools.retriever import create_retriever_tool

retriever_tool = create_retriever_tool(
    retriever=retriever,
    name="retriever_tool",
    description="""For any information related to Oracle Receivables, use this tool only. Dont search for information anywhere else.
    Useful for retrieving information related to Oracle Receivables. If you dont find info,just say "hey shiv i dont know".""",
)

from googlesearch import search

def google_search(query, num_results=5):
    results = {}
    for i, j in enumerate(search(query, num=num_results, stop=num_results)):
        results[i] = j
    return results

# Create a Tool object for your search tool
search_tool = Tool(
    name="Google Search",
    description="A tool for performing a Google search and returning the top search results.",
    func=google_search
)

# Create a list of tools
tools = [retriever_tool, search_tool]

from langchain_google_genai import GoogleGenerativeAI
llm = GoogleGenerativeAI(model="gemini-pro", google_api_key=os.environ["GOOGLE_API_KEY"])

from langchain.agents import create_react_agent, AgentExecutor
from langchain import hub

prompt = hub.pull("hwchase17/react")

# Create the agent
agent = create_react_agent(llm=llm, tools=tools, prompt=prompt)
agent_executer = AgentExecutor(agent=agent, tools=tools, verbose=True)

# Test the agent
response = agent_executer.invoke({"input":"Can you explain the concept of Adjustments and Chargebacks in Oracle Receivable ?"})
print(response['output'])
